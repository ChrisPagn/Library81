@page "/book3d"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="book3d-wrapper">
    @if (isLoading)
    {
        <div class="book3d-loading">
            @if (UseMudBlazor)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.body2" Class="mt-2">Chargement du livre 3D...</MudText>
            }
            else
            {
                <div>Chargement...</div>
            }
        </div>
    }
    else if (hasError)
    {
        <div class="book3d-error">
            @if (UseMudBlazor)
            {
                <MudAlert Severity="Severity.Error">
                    Erreur lors du chargement du livre 3D
                </MudAlert>
            }
            else
            {
                <div class="error">Erreur lors du chargement du livre 3D</div>
            }
        </div>
    }
    <canvas id="@CanvasId" style="@(isLoading || hasError ? "display: none;" : "")"></canvas>
</div>

<div class="book3d-controls">
    @if (UseMudBlazor)
    {
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Open"
                   Disabled="@(!isReady)">
            Ouvrir
        </MudButton>
        <MudButton Color="Color.Secondary"
                   Variant="Variant.Outlined"
                   OnClick="Prev"
                   Disabled="@(!isReady)">
            ◀︎
        </MudButton>
        <MudButton Color="Color.Secondary"
                   Variant="Variant.Outlined"
                   OnClick="Next"
                   Disabled="@(!isReady)">
            ▶︎
        </MudButton>
        <MudButton Color="Color.Error"
                   Variant="Variant.Outlined"
                   OnClick="Close"
                   Disabled="@(!isReady)">
            Fermer
        </MudButton>
    }
    else
    {
        <button @onclick="Open" disabled="@(!isReady)">Ouvrir</button>
        <button @onclick="Prev" disabled="@(!isReady)">◀︎</button>
        <button @onclick="Next" disabled="@(!isReady)">▶︎</button>
        <button @onclick="Close" disabled="@(!isReady)">Fermer</button>
    }
</div>

@code {
    [Parameter] public string CanvasId { get; set; } = "book3d-canvas";
    [Parameter] public bool AutoOpen { get; set; } = true;
    [Parameter] public int PageCount { get; set; } = 24;
    [Parameter] public bool UseMudBlazor { get; set; } = false;
    [Parameter] public EventCallback<string> OnError { get; set; }
    [Parameter] public EventCallback OnInitialized { get; set; }

    private IJSObjectReference? _bookApi;
    private bool isLoading = true;
    private bool hasError = false;
    private bool isReady = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            // Vérifier si Babylon.js est chargé
            var babylonExists = await JS.InvokeAsync<bool>("eval", "typeof BABYLON !== 'undefined'");
            if (!babylonExists)
            {
                throw new InvalidOperationException("Babylon.js n'est pas chargé");
            }

            // Vérifier si Book3D est disponible
            var book3DExists = await JS.InvokeAsync<bool>("eval", "typeof Book3D !== 'undefined'");
            if (!book3DExists)
            {
                throw new InvalidOperationException("Book3D n'est pas disponible");
            }

            var opts = new
            {
                pageCount = PageCount,
                width = 0.21,
                height = 0.297,
                thickness = 0.03
            };

            _bookApi = await JS.InvokeAsync<IJSObjectReference>("Book3D.init", CanvasId, opts);

            if (_bookApi == null)
            {
                throw new InvalidOperationException("Échec de l'initialisation de Book3D");
            }

            isReady = true;
            isLoading = false;

            if (AutoOpen)
            {
                await _bookApi.InvokeVoidAsync("open");
            }

            await OnInitialized.InvokeAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            hasError = true;
            isLoading = false;
            await OnError.InvokeAsync(ex.Message);
            StateHasChanged();
        }
    }

    async Task Open()
    {
        if (_bookApi != null && isReady)
        {
            try
            {
                await _bookApi.InvokeVoidAsync("open");
            }
            catch (Exception ex)
            {
                await OnError.InvokeAsync($"Erreur lors de l'ouverture : {ex.Message}");
            }
        }
    }

    async Task Close()
    {
        if (_bookApi != null && isReady)
        {
            try
            {
                await _bookApi.InvokeVoidAsync("close");
            }
            catch (Exception ex)
            {
                await OnError.InvokeAsync($"Erreur lors de la fermeture : {ex.Message}");
            }
        }
    }

    async Task Next()
    {
        if (_bookApi != null && isReady)
        {
            try
            {
                await _bookApi.InvokeVoidAsync("nextPage");
            }
            catch (Exception ex)
            {
                await OnError.InvokeAsync($"Erreur page suivante : {ex.Message}");
            }
        }
    }

    async Task Prev()
    {
        if (_bookApi != null && isReady)
        {
            try
            {
                await _bookApi.InvokeVoidAsync("prevPage");
            }
            catch (Exception ex)
            {
                await OnError.InvokeAsync($"Erreur page précédente : {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_bookApi != null)
        {
            try
            {
                await _bookApi.DisposeAsync();
            }
            catch
            {
                // Ignorer les erreurs de dispose
            }
        }
    }
}

<style>
    .book3d-wrapper {
        width: min(900px, 90vw);
        aspect-ratio: 16 / 10;
        margin: 1rem auto;
        background: radial-gradient(closest-side, rgba(0,0,0,0.08), rgba(0,0,0,0));
        border-radius: 12px;
        overflow: hidden;
        position: relative;
    }

    .book3d-loading, .book3d-error {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        width: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

    #book3d-canvas, .book3d-wrapper canvas {
        width: 100%;
        height: 100%;
        display: block;
    }

    .book3d-controls {
        display: flex;
        gap: .5rem;
        justify-content: center;
        margin-bottom: .5rem;
    }

        .book3d-controls button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .error {
        color: #d32f2f;
        padding: 1rem;
        border: 1px solid #d32f2f;
        border-radius: 4px;
        background-color: #ffebee;
    }
</style>