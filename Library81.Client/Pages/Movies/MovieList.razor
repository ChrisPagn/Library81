@page "/movies"
@using Library81.Client.Services
@using Library81.Shared.DTOs
@using Library81.Shared.ViewModels
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation

@rendermode InteractiveWebAssembly

<PageTitle>Gestion des Films</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Gestion des Films</MudText>

<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="6" md="8">
                <MudTextField @bind-Value="searchString" 
                             Placeholder="Rechercher..." 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" 
                             Class="mt-0"
                             DebounceInterval="500" 
                             OnDebounceIntervalElapsed="@(() => LoadMovies())" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4" Class="d-flex justify-end">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@(() => Navigation.NavigateTo("/movies/new"))">
                    Nouveau Film
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudCard Class="mt-4">
    <MudCardContent Class="pa-0">
        <MudDataGrid T="MovieDto" 
                    Items="@movies" 
                    Loading="@loading" 
                    Hover="true" 
                    SortMode="SortMode.Multiple" 
                    Filterable="true" 
                    QuickFilter="@_quickFilter" 
                    Virtualize="true" 
                    FixedHeader="true" 
                    Height="600px">
            <Columns>
                <PropertyColumn Property="x => x.Title" Title="Titre" />
                <PropertyColumn Property="x => x.Creator" Title="Réalisateur" />
                <PropertyColumn Property="x => x.Duration" Title="Durée" />
                <PropertyColumn Property="x => x.Rating" Title="Classification" />
                <PropertyColumn Property="x => x.Year" Title="Année" />
                <PropertyColumn Property="x => x.SubcategoryName" Title="Sous-catégorie" />
                <TemplateColumn Title="Actions" Sortable="false">
                    <CellTemplate>
                        <MudStack Row="true">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                         Color="Color.Primary" 
                                         Size="Size.Small"
                                         OnClick="@(() => EditMovie(context.Item))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                         Color="Color.Error" 
                                         Size="Size.Small"
                                         OnClick="@(() => DeleteMovie(context.Item))" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="MovieDto" />
            </PagerContent>
        </MudDataGrid>
    </MudCardContent>
</MudCard>

@code {
    private List<MovieDto> movies = new();
    private bool loading = true;
    private string searchString = "";

    private Func<MovieDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.Title?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (x.Creator?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (x.Rating?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return false;
    };

    protected override void OnInitialized()
    {
        if (ApiService == null)
            throw new Exception("ApiService n'a pas été injecté!");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        loading = true;
        var response = await ApiService.GetAsync<List<MovieDto>>("movies");

        if (response.Success && response.Data != null)
        {
            movies = response.Data;
        }
        else
        {
            Snackbar.Add(response.Message ?? "Erreur lors du chargement des films", Severity.Error);
        }

        loading = false;
        StateHasChanged();
    }

    private void EditMovie(MovieDto movie)
    {
        Navigation.NavigateTo($"/movies/edit/{movie.MovieId}");
    }

    private async Task DeleteMovie(MovieDto movie)
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ContentText, $"Êtes-vous sûr de vouloir supprimer le film '{movie.Title}' ?" },
            { x => x.ButtonText, "Supprimer" },
            { x => x.Color, Color.Error }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmer la suppression", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await ApiService.DeleteAsync<bool>($"movies/{movie.MovieId}");

            if (response.Success)
            {
                Snackbar.Add("Film supprimé avec succès", Severity.Success);
                await LoadMovies();
            }
            else
            {
                Snackbar.Add(response.Message ?? "Erreur lors de la suppression", Severity.Error);
            }
        }
    }
}
